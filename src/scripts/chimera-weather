#! /usr/bin/env python
# -*- coding: iso-8859-1 -*-

# chimera - observatory automation system
# Copyright (C) 2006-2007  P. Henrique Silva <henrique@astro.ufsc.br>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.


import sys

from chimera.core.cli import ChimeraCLI, action


class ChimeraWheater(ChimeraCLI):
    def __init__(self):
        ChimeraCLI.__init__(
            self, "chimera-weather", "Weather Controller", 0.1, port=9005)

        self.addHelpGroup("INFO", "Weather Station Information")

        self.addInstrument(name="weatherstation",
                           cls="WeatherStation",
                           required=True,
                           help="Weather Station instrument to be used."
                                "If blank, try to guess from chimera.config",
                           helpGroup="INFO")

    @action(short="i",
            long="--info",
            helpGroup="INFO",
            help="Displays available parameters names and its respective values.")
    def info(self, options):
        self.out("=" * 60)
        self.out("Weather Station Parameters and Values:", end="\n")

        w = self.weatherstation

        humidity = w.humidity()
        temperature = w.temperature()
        wind_speed = w.wind_speed()
        wind_direction = w.wind_direction()
        dew_point = w.dew_point()
        pressure = w.pressure()
        rain = w.rain()

        self.out('Humidity: %.2f %% @ %s.' % (humidity.value, humidity.time))
        self.out('Temperature: %.2f %s @ %s.' % (temperature.value, temperature.unit, temperature.time))
        self.out('Wind Speed: %.2f %s @ %s.' % (wind_speed.value, wind_speed.unit, wind_speed.time))
        self.out('Wind Direction: %.2f %s @ %s.' % (wind_direction.value, wind_direction.unit, wind_direction.time))
        self.out('Dew Point: %.2f %s @ %s.' % (dew_point.value, dew_point.unit, dew_point.time))
        self.out('Pressure: %.2f %s @ %s.' % (pressure.value, pressure.unit, pressure.time))
        self.out('Rain: %.2f %s @ %s.' % (rain.value, rain.unit, rain.time))

        self.out("=" * 60)
        self.out(end="\n")


def main():
    cli = ChimeraWheater()
    cli.run(sys.argv)
    cli.wait()


if __name__ == '__main__':
    main()
